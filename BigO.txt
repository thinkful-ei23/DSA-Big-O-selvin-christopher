1) Even or odd - Constant  - O(1)  - runtime is the same regardless of the input

    function isEven(value){
      if (value % 2 == 0){
        return true;
      }
      else
        return false;
    }


2) Are you here? - polynomial - O(n^2) - nested loop complexity increases by 1 as # loops increases

    function areYouHere(arr1, arr2) {
    for (let i=0; i<arr1.length; i++) {
        const el1 = arr1[i];
        for (let j=0; j<arr2.length; j++) {
            const el2 = arr2[j];
            if (el1 === el2) return true;
        }
    }
    return false;
}

3) Doubler - linear - O(n) complexity is proportional to input size

  function doubleArrayValues(array) {
      for (let i=0; i<array.length; i++) {
          array[i] *= 2;
      }
      return array;
  }

4) Naive Search - Logarithmic time O(log(n)) -While logarithmic complexity algorithms do take longer with larger inputs, run time increases slowly.

  function naiveSearch(array, item) {
      for (let i=0; i<array.length; i++) {
          if (array[i] === item) {
              return i;
          }
      }
  }

5) Creating pairs - linear - O(n) complexity is proportional to input size
  function createPairs(arr) {
      for (let i = 0; i < arr.length; i++) {
          for(let j = i+1; j < arr.length; j++) {
              console.log(arr[i] + ", " +  arr[j] );
          }
      }
  }

6) Computing fibonaccis - linear - O(n) complexity is proportional to input size
  function generateFib(num) {
    let result = [];
    for (let i = 1; i <= num; i++) {

      // we're adding the first item
      // to the result list, append the
      // number 0 to results
      if (i === 1) {
        result.push(0);
      }
      // ...and if it's the second item
      // append 1
      else if (i == 2) {
        result.push(1);
      }

      // otherwise, sum the two previous result items, and append that value to results.
      else {
        result.push(result[i - 2] + result[i - 3]);
      }
    }
    // once the for loop finishes
    // we return `result`.
    return result;
  }

7) Computing fibonaccis - linear - O(n) complexity is proportional to input size
  function efficientSearch(array, item) {
      let minIndex = 0;
      let maxIndex = array.length - 1;
      let currentIndex;
      let currentElement;

      while (minIndex <= maxIndex) {
          currentIndex = Math.floor((minIndex + maxIndex) / 2);
          currentElement = array[currentIndex];

          if (currentElement < item) {
              minIndex = currentIndex + 1;
          }
          else if (currentElement > item) {
              maxIndex = currentIndex - 1;
          }
          else {
              return currentIndex;
          }
      }
      return -1;
  }

8) An Efficient Search O(log n) - Some fraction of the remaining input is processed in each iteration of a logarithmic algorithm

  function efficientSearch(array, item) {
      let minIndex = 0;
      let maxIndex = array.length - 1;
      let currentIndex;
      let currentElement;

      while (minIndex <= maxIndex) {
          currentIndex = Math.floor((minIndex + maxIndex) / 2);
          currentElement = array[currentIndex];

          if (currentElement < item) {
              minIndex = currentIndex + 1;
          }
          else if (currentElement > item) {
              maxIndex = currentIndex - 1;
          }
          else {
              return currentIndex;
          }
      }
      return -1;
  }

9) Random element - O(1) constant time - no matter what number is input, the execution time remains the same

  function findRandomElement(arr) {
      return arr[Math.floor(Math.random() * arr.length)];
  }


10) Is it prime? - O(n) - linear - as the prime number trends larger, the gap between numbers grows very slowly, almost linearly.

  function isPrime(n) {
      // if n is less than 2 or a decimal, it's not prime
      if (n < 2 || n % 1 != 0) {
          return false;
      }
      // otherwise, check if `n` is divisible by any integer
      // between 2 and n.
      for (let i = 2; i < n; ++i) {
          if (n % i == 0) return false;
      }
      return true;
  }

